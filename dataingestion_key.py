# -*- coding: utf-8 -*-
"""DataIngestion_key.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HQvX9ljH8RU519Z8Sv7DxqAcpWKETswr
"""

!pip install mysql-connector-python

import mysql.connector
from mysql.connector import Error

hostname = "sar8p.h.filess.io"
database = "listkey_pinkavoid"
port = "3307"
username = "listkey_pinkavoid"
password = "fb1eed788d8b2d4e7002b88c522d83e6de9363cd"

try:
    connection = mysql.connector.connect(host=hostname, database=database, user=username, password=password, port=port)
    if connection.is_connected():
        db_Info = connection.get_server_info()
        print("Connected to MySQL Server version ", db_Info)
        cursor = connection.cursor()
        cursor.execute("select database();")
        record = cursor.fetchone()
        print("You're connected to database: ", record)

except Error as e:
    print("Error while connecting to databse MySQL", e)
finally:
    if connection.is_connected():
        cursor.close()
        connection.close()
        print("The connection on MySQL is closed")

import pandas as pd
order_payments = pd.read_csv("olist_order_payments_dataset.csv")
order_payments.head()
order_payments.shape

import pandas as pd
import mysql.connector
from mysql.connector import Error

# Connection details
hostname = "sar8p.h.filess.io"
database = "listkey_pinkavoid"
port = "3307"
username = "listkey_pinkavoid"
password = "fb1eed788d8b2d4e7002b88c522d83e6de9363cd"

csv_file_path = "olist_order_payments_dataset.csv"
table_name = "olist_order_payments"

try:
    # Step 1: Establish a connection to MySQL server
    connection = mysql.connector.connect(
        host=hostname,
        database=database,
        user=username,
        password=password,
        port=port
    )
    if connection.is_connected():
        print("Connected to MySQL Server successfully!")

        # Step 2: Create a cursor to execute SQL queries
        cursor = connection.cursor()

        cursor.execute(f"DROP TABLE IF EXISTS {table_name};")
        print(f"Table `{table_name}` dropped if it existed.")

        create_table_query = f"""
        CREATE TABLE {table_name} (
            order_id VARCHAR(50),
            payment_sequential INT,
            payment_type VARCHAR(20),
            payment_installments INT,
            payment_value FLOAT
        );
        """
        cursor.execute(create_table_query)
        print(f"Table `{table_name}` created successfully!")

        data = pd.read_csv(csv_file_path)
        print("CSV data loaded into pandas DataFrame.")

        batch_size = 500  # Define the batch size - it is important to have an appropriate batch sie as sometimes it is too hard on the RAM and it throws an error
        total_records = len(data)

        print(f"Starting data insertion into `{table_name}` in batches of {batch_size} records.")
        for start in range(0, total_records, batch_size):
            end = start + batch_size
            batch = data.iloc[start:end]

            batch_records = [
                tuple(row) for row in batch.itertuples(index=False, name=None)
            ]

            insert_query = f"""
            INSERT INTO {table_name}
            (order_id, payment_sequential, payment_type, payment_installments, payment_value)
            VALUES (%s, %s, %s, %s, %s);
            """

            # Execute the insertion query for the batch
            cursor.executemany(insert_query, batch_records)
            connection.commit()  # Commit after each batch
            print(f"Inserted records {start + 1} to {min(end, total_records)} successfully.")

        print(f"All {total_records} records inserted successfully into `{table_name}`.")

except Error as e:
    print("Error while connecting to MySQL or inserting data:", e)

finally:
    if connection.is_connected():
        cursor.close()
        connection.close()
        print("MySQL connection is closed.")